package {{ .PackageName }}
{{ if .Imports}}
import (
{{- range $import := .Imports }}
  {{if $import.Alias}}{{$import.Alias}} {{end}}"{{$import.Path}}"
{{- end}}
)
{{- end}}

type {{.Struct.Prefix}}Option func(*{{.Struct.TypeName}}) error 

func New{{.Struct.TypeName}}({{ .Struct.RequiredFieldsAsParams}}{{if .Struct.HasRequiredAndOptionalField}}, {{end}}{{ if .Struct.HasOptionalField}}opts ...{{.Struct.Prefix}}Option{{end}}) (*{{.Struct.TypeName}}, error) {
    obj := &{{.Struct.TypeName}}{
    {{- range $field := .Struct.ListRequiredFields }}
      {{$field.Name}}: {{$field.ParamShorthand}},
    {{- end}}
    }
    {{- if .Struct.HasOptionalField}}
    for _, opt := range opts {
      if err := opt(obj); err != nil {
          return nil, err
      }
    }
    {{- end}}
    return obj, nil
}

func Must{{.Struct.TypeName}}({{ .Struct.RequiredFieldsAsParams}}{{if .Struct.HasRequiredAndOptionalField}}, {{end}}{{ if .Struct.HasOptionalField}}opts ...{{.Struct.Prefix}}Option{{end}}) *{{.Struct.TypeName}} {
  obj, err := New{{.Struct.TypeName}}({{.Struct.PassRequiredFields}}{{if .Struct.HasRequiredAndOptionalField}}, {{end}}{{ if .Struct.HasOptionalField}}opts...{{end}})
  if err != nil {
    panic(err)
  }
  return obj
}
{{- range $field := .Struct.Fields}} 
{{ if not $field.Required }}
func With{{$field.WithName}}({{$field.ParamShorthand}} {{$field.TypeName}}) {{$.Struct.Prefix}}Option {
  return func(obj *{{$.Struct.TypeName}}) error {
    // TODO: your initialization rule
    return errors.New("not implemented")
  }
}
{{- end}}
{{- end}}
